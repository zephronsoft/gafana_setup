version: '3.8'

networks:
  monitor-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}
  loki_data: {}
  postgres_data: {}

services:
  # PostgreSQL for Grafana (Enterprise DB)
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: grafana
      POSTGRES_USER: ${POSTGRES_USER:-grafana}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-grafana}"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Prometheus with HA setup
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    user: "65534:65534"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.wal-compression'
      - '--web.external-url=http://prometheus.localhost'
      - '--web.route-prefix=/'
      - '--log.level=warn'
      - '--query.max-concurrency=50'
      - '--query.max-samples=50000000'
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # AlertManager with clustering
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    user: "65534:65534"
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://alertmanager.localhost'
      - '--web.route-prefix=/'
      - '--log.level=warn'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.advertise-address=alertmanager:9094'
    restart: unless-stopped
    ports:
      - "9093:9093"
      - "9094:9094"
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Node Exporter with enhanced metrics
  nodeexporter:
    image: prom/node-exporter:v1.6.1
    container_name: nodeexporter
    user: "65534:65534"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
      - '--collector.interrupts'
      - '--collector.tcpstat'
      - '--collector.meminfo_numa'
      - '--web.disable-exporter-metrics'
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitor-net
    pid: host
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=disk,network,tcp,udp,percpu,sched,process'
      - '--docker_only'
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Grafana with PostgreSQL backend and enhanced SMTP
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    user: "472:472"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${POSTGRES_USER:-grafana}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - GF_DATABASE_SSL_MODE=disable
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_DEFAULT_THEME=dark
      - GF_AUTH_ANONYMOUS_ENABLED=false
      # SMTP Configuration - Development (MailHog)
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=mailhog:1025
      - GF_SMTP_USER=
      - GF_SMTP_PASSWORD=
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-noreply-monitoring@localhost}
      - GF_SMTP_SKIP_VERIFY=true
      - GF_SMTP_FROM_NAME=Monitoring System
      # Server Configuration (no SSL)
      - GF_SERVER_DOMAIN=grafana.localhost
      - GF_SERVER_ROOT_URL=http://grafana.localhost
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - monitor-net
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    user: "10001:10001"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command:
      - '-config.file=/etc/loki/loki.yml'
      - '-target=all'
    restart: unless-stopped
    ports:
      - "3100:3100"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - '-config.file=/etc/promtail/promtail.yml'
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Pushgateway for batch jobs
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: pushgateway
    user: "65534:65534"
    restart: unless-stopped
    ports:
      - "9091:9091"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Blackbox exporter for endpoint monitoring
  blackbox:
    image: prom/blackbox-exporter:v0.24.0
    container_name: blackbox
    volumes:
      - ./blackbox:/etc/blackbox
    command:
      - '--config.file=/etc/blackbox/blackbox.yml'
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/usr/local/etc/redis
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"

  # MailHog for development/testing SMTP
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web interface
    networks:
      - monitor-net
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - ./mailhog:/maildir
    labels:
      org.label-schema.group: "monitoring"
      environment: "development"
      team: "platform-reliability"

  # Postfix for production SMTP
  postfix:
    image: boky/postfix:latest
    container_name: postfix
    restart: unless-stopped
    ports:
      - "587:587"
    networks:
      - monitor-net
    environment:
      - ALLOWED_SENDER_DOMAINS=${MAIL_DOMAIN:-localhost}
      - HOSTNAME=postfix
      - MESSAGE_SIZE_LIMIT=10485760
      - MAILNAME=${MAIL_DOMAIN:-localhost}
      - POSTFIX_myhostname=postfix
      - POSTFIX_mydomain=${MAIL_DOMAIN:-localhost}
      - POSTFIX_mynetworks=127.0.0.0/8,172.20.0.0/16,10.0.0.0/8,192.168.0.0/16
    profiles:
      - production
    labels:
      org.label-schema.group: "monitoring"
      environment: "production"
      team: "platform-reliability"


